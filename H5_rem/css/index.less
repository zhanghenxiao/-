// @import 是一个less 文件导入到其他的一个less 文件中
// link 只能导入到html中
@import 'common.less';
body {
  min-width: 320px;
  // 宽度设置为15rem 这是苏宁的做法，也可写成max-width:750, 但是这里设置rem的时候会有自适应的效果
  max-width: 15rem;
  margin: 0 auto;
  line-height: 1.5;
  font-family: Arial,Helvetica;
  background-color: #F2F2F2;
}
// 页面元素rem计算公式： 页面元素的px / html的字体大小 这里的是50
@baseFont: 50;  // 这里抽离出来的原因是，后续修改方便，也增加了代码的可读性

// 老问题 设置固定定位的盒子，需要有宽度，并且是相对于可视窗口定位，并且居中不能使用margin
.search-content {
  display: flex;
  position: fixed;
  top: 0;
  left: 50%;
  transform: translateX(-50%);
  width: 15rem;
  height: 88rem / @baseFont;
  background-color:#FFC001;
  .classify {
    width: 44rem / @baseFont;
    height: 70rem / @baseFont;
    margin: 11rem / @baseFont 25rem / @baseFont 7rem / @baseFont 24rem / @baseFont;
    background: url(../images/classify.png) no-repeat;
    // 背景缩放,需要与盒子本身的大小一致 故需要设置宽和高
    background-size: 44rem / @baseFont 70rem / @baseFont;
    // 这种也可实现
    // &::before {
    //   content: '';
    //   display: table;
    //   width: 100%;
    //   height: 100%;
    //   background: url(../images/classify.png) no-repeat;
    //   // 背景缩放
    //   background-size: 44rem / @baseFont 70rem / @baseFont;
    // }
  }
  .search {
    flex: 1;
    input {
      // 每个input都有蓝色的边框线 和boder 我们需要去掉他们
      outline: none;
      border: 0;
      // 全部需占据100%
      width: 100%;
      height: 66rem / @baseFont;
      // 设置高度的一半  刚好设置成这样的形状
      border-radius: 33rem / @baseFont;
      margin-top: 12rem / @baseFont;
      font-size: 25rem / @baseFont;
      padding-left: 55rem / @baseFont;
      color: #757575;
    }
  }
  .login {
    width: 75rem / @baseFont;
    height: 70rem / @baseFont;
    line-height: 70rem / @baseFont;
    margin: 10rem / @baseFont;
    font-size: 25rem / @baseFont;
    text-align: center;
    color: #fff;
  }
}

// 给盒子设为自适应，img填充盒子
.banner {
  width: 750rem / @baseFont;
  height: 368rem / @baseFont;
  img {
    height: 100%;
    width: 100%;
  }
}

.bd {
  display: flex;
  a {
    // 这里为什么设置了flex后无需设置其他都能成功做到自适应，因为flex 自身带了这样的特性
    flex: 1;
    img {
      width: 100%;
    }
  }
}

// 二行的排列 flex 的做法
// nav {
//   display: flex;
//   flex-wrap: wrap;
//   // 记得flex-wrap设置在父级，
//   a {
//     // flex也可设置为百分比的，
//     flex: 20%;
//     text-decoration: none;
//     text-align: center;
//     img {
//       width: 82rem / @baseFont;
//       height: 82rem / @baseFont;
//     }
//     &::after {
//       content: '爆款手机';
//       display: block;
//       font-size: 25rem / @baseFont;
//       color: #000;
//     }
//   }
// }

// 也需先保证最外层的盒子是自适应的 ！！！width: 750rem / @baseFont;
nav {
  width: 750rem / @baseFont;
  a {
    float: left;
    width: 150rem / @baseFont;
    height: 140rem / @baseFont;
    text-align: center;
    text-decoration: none;
    // 上下布局，故img需独占一行
    img {
      display: block;
      width: 82rem / @baseFont;
      height: 82rem / @baseFont;
      margin: 10rem / @baseFont auto 0;
    }
    span {
      font-size: 25rem / @baseFont;
      color: #000;
    }
  }
}